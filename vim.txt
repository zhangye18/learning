a append
i insert
o open a line below

A append after line
I insert before line
O append a line above

insert -->normal ESC(ctrl+c || ctrl +[)
normal-->insert  gi
:w 已写入
:q 退出
:wq 保存退出
分屏 :vs(vertical split),:sq(split)
全局替换 、:% s/java/JAVA/g 把java 替换成JAVA 全局替换
显示行号 :set nu
搜索结果高亮 :set hls
打开高亮 :syntax on



normal(普通)模式
insert(编辑)模式
cmd命令模式
v(isual)可视化模式
Visual 一般用来块状选择文本
Normal-->visual 使用v
V 选择行
ctrl+v 块状选择

ctrl+h 删除上一个字符
ctrl+w 删除上一个单词
ctrl+u 删除当前行

w/W 移动到下一个word/WORD开头
e/E 下一个word/WORD尾
b/B 回到上一个word/WORD开头
word 以非空白符分割的单词，WORD 以空白符分割的单词

同一行之间移动
f{char} 可以移动到char字符上，t移动到char的前一个字符
如果第一次没搜到，可以用分号(;)/逗号(,)继续搜该行下一个/上一个
F反过来搜前面的字符

水平移动
0 移动到行首第一个字符，^移动到第一个非空白字符
$ 移动到行尾，g_移动到行尾非空白字符

垂直移动
()句子间移动 
{} 段落之间移动

页面移动
gg/G移动到文件开头和结尾 
ctrl+o 快速返回
H/M/L 开头(Head) 中间(Middle) 结尾(Lower)
ctrl+u ctrl+f 上下翻页 (upword/forward) 
zz 屏幕置为中间

删除字符/单词
x
d
数字加命令

修改
r(replace) c(change) s(substitute)
r 替换一个字符 
s 替换并进入插入模式
c 快速修改

查找
/ 或者? 向前或者反向搜索
n/N 跳转到下一个或者上一个匹配
*/# 当前单词的前向和后向匹配

替换命令 substitute
:[range]s[ubstitute]/{pattern}/{string}/[flags]
range 表示范围 10,20表示10-20行，% 表示全部
pattern 要替换的模式 
string 替换后文本
Flags 
g(global) 表示全局范围内执行  
c(confirm) 表示确认 ，可以确认或者拒绝修改
n(number) 报告匹配到的次数而不替换，可以用来查询匹配次数

Buffer 打开一个文件的内存缓冲区
窗口 Buffer可视化的分割区域
Tab可以组织窗口为一个工作区

Buffer 缓冲区
Vim 打开一个文件后会加载文件内容到缓冲区
之后的修改都是针对内存中的缓冲区，并不会直接保存到文件
直到我们执行:w(write) 的时候才会把修改内容写入到文件里

Buffer 切换
:ls 会列举当前缓冲区，然后使用:b n跳转到第几个缓冲区
:bpre :bnext :bfirst :blast
或者使用:b buffer_name 加上tab补全来跳转

窗口 可视化的分割区域
一个缓冲区可以分割成多个窗口，每个窗口也可以打开不同换从去
Ctrl+w s 水平分割 Ctrl+w v 垂直分割 或者:sp 和 :vs

窗口切换
Ctrl+w w 窗口间切换
Ctrl+w h 左边的窗口
Ctrl+w j 下边的窗口
Ctrl+w k 上边的窗口
Ctrl+w l 右边的窗口

重排窗口
Ctrl+w = 所有窗口等宽等高
Ctrl+w _ 最大化活动窗口的高度
Ctrl+w | 最大化活动窗口的宽度
[N]Ctrl+w _ 把活动窗口的高度设为[N]行
[N]Ctrl+w | 把活动窗口的宽度设为[N]列

Tab 窗口分组
Tab 可以容纳一系列窗口的容器(:h tabpage)
:tabe[dit]{filename} 在新标签页中打开{filename}
ctrl+w T 把当前窗口移到一个新标签页
:tabc[lose] 关闭当前标签页及其中的所有窗口
:tabo[nly] 只保留活动标签页，关闭其他标签页

Tab切换
Ex命令              普通模式命令        用途
:tabn[ext] {N}       {N}gt              切换到编号为{N}的标签页      
:tabn[ext]            gt                切换到下一标签页
:tabp[revious]        gT                 切换到上一标签页

Text Object(文本对象)
[number]<command>[text object]
number 次数 command 命令 d(elete) c(hange) y(yank)
text object 要操作的文本对象，比如单词w ,句子s,段落p

iw inner word 键入viw命令，首先v将进入选择模式，然后iw选中当前单词
aw a word 不但选中当前单词，还会包含当前单词之后的空格
i( or i) 括号内文本
a( or a) 包括圆括号
< { [ " ' ` 同理 

删除单词
次数+命令+文本对象

复制粘贴
normal 复制粘贴 y(yank) p(put) 剪贴d 和p
v(visual) 选中所要复制的地方，然后用P粘贴

yiw 复制一个单词 ，yy 复制一行

insert模式
vim 中设置了 :set autoindent ,粘贴python代码缩进错乱
解决方式 粘贴前使用:set paste 发现缩进不起作用 粘贴后使用:set nopaste

寄存器
vim里的操作的是寄存器，而不是系统剪贴板
默认使用d删除/y 复制的内容都放到了"无名寄存器"
"{register} 前缀可以指定寄存器，不指定默认用无名寄存器
比如 "ayiw 复制一个单词到寄存器a中，"bdd 删除当前行到寄存器b中

查看寄存器内容
:reg a 可以查看a寄存器的内容

出了有名寄存器a-z,Vim 还有其他常见寄存器
复制专用寄存器 "0 使用y复制文本同时也会被拷到复制寄存器0
系统剪贴板 "+ 可以再复制前加上 "+ 复制到系统剪切板
其他一些寄存器，如 "% 当前文件名，". 上次插入的文本

使用系统剪切板 要确认vim有clipboard
:echo has('clipboard') 是1 就可以
:set clipboard=unnamed 可以让你直接复制粘贴系统剪切板内容
:set autoindent 自动缩进


e! 重新加载 并且不保存

宏(macro)
一些列命令的集合
使用宏 [录制]一系列操作，然后用于[回放]
宏可以非常方便地把一系列命令用在多行文本上
Vim 使用q 来录制，同时也是q结束录制
使用q{register}选择要保存的寄存器，把录制的命令保存其中
使用@{register}回放寄存器中保存的一系列命令

normal模式下 Ctrl+p 回到上一个命令

常见的三种补全类型
Ctrl+n 和 Ctrl+p 补全单词
Ctrl+x Ctrl+f 补全文件名
Ctrl+x Ctrl+o 补全代码，需要开启文件类型检查，安装插件

开启文件类型 :filetype on
查看文件类型 :set filetype

插入现有文件名 :r! echo %

插入现有文件名全路径  :r! echo %:p

更换配色
:colorscheme 显示当前的主题配色 默认是default
:colorscheme <Ctrl+d> 显示所有配色
:colorscheme 配色名 修改配色

同时打开两个文件
vim file1 file2 -O

通常VIM配色方案文件存放在“/usr/share/vim/vim74/colors
网上下载配色
http://www.easycolor.cc/vim/list.html
放到.vim/colors/下

vim 配置文件
new 一个隐藏文件 vim ~/.vimrc

vimrc生效方式
1.退出vim 再重新进入
2.:source ~/.vimrc

在 vimrc文件中 :h option-list 查看所有的配置
/配置名 回车跳转到这个配置

normal模式下 
使用map实现映射
:map - x 即 - 就可以删除字符

递归映射
nmap/vmap/imap定义映射只在normal/visual/insert分别有效
如 :imap <c-d> <Esc>ddi insert模式下Ctrl+d 删除一行并且进入insert模式

非递归映射
使用*map对应的nnoremap/vnoremap/inoremap
《笨方法学Vimscript》学习vim脚本的书籍

插件
推荐使用vim-plug插件管理器
https://github.com/junegunn/vim-plug

使用方法
1.修改.vimrc文件 ，增加代码

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Initialize plugin system
call plug#end()


vim-startify vim开屏插件
https://github.com/mhinz/vim-startify

安装步骤
1.修改.vimrc文件 ，增加插件名称(Plug 'mhinz/vim-startify')
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall

:qa 退出所有窗口

nerdtree 文件管理的插件
python-mode 编写python的vim 插件

查找vim插件的网站 https://vimawesome.com

vim美化插件
修改启动界面 https://github.com/mhinz/vim-startify

状态栏美化:https://github.com/vim-airline/vim-airline

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall

增加代码缩进线条: https://github.com/yggdroot/indentline

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'yggdroot/indentLine'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall

vim 配色
vim-hybird github.com/w0ng/vim-hybrid
安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'w0ng/vim-hybrid'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall
4 设置主题 :colorscheme hybrid
5 持久化 修改.vimrc文件 增加 colorscheme hybrid


solarized :github.com/altercation/vim-colors-solarized
gruvbox :github.com/morhetz/gruvbox

文件管理器nerdtree
https://github.com/scrooloose/nerdtree

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'scrooloose/nerdtree'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall
4 使用 vim 中 :NERDTree

模糊搜索器 ctrlp插件
https://github.com/ctrlpvim/ctrlp.vim

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'ctrlpvim/ctrlp.vim'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall

使用方式
修改.vimrc文件 let g:ctrlp_map = '<c-p>'

移动到任意位置 easymotion插件
https://github.com/easymotion/vim-easymotion

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'easymotion/vim-easymotion'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall
4 修改.vimrc文件 ，nmap ss <Plug>(easymotion-s2)

成对修改 vim-surround
https://github.com/tpope/vim-surround

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'tpope/vim-surround'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall

normal模式下 增加，删除，修改成对内容

ds(delete a surrounding)
cs(change a surrounding)
ys(you add a surrounding)

例如
ys iw " 给单词添加双引号
cs " ' 双引号改成单引号
cs ( ] 括号改成中括号
ds ' 删除单引号

fzf 与fzf.vim
fzf 是一个强大的命令行模糊搜索工具,fzf.vim 集成到了vim里
https://github.com/junegunn/fzf.vim

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall

常用Commands
Files[PATH] 模糊搜索目录
Ag[PATTERN] 模糊搜索字符串

批量搜索替换 far.vim
https://github.com/brooth/far.vim

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'brooth/far.vim'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall

使用方式
:Far foo bar **/*.py  foo替换为bar
:Fardo  执行

vim-go插件
https://github.com/fatih/vim-go
代码补全，重构，跳转，自动格式化，自动导入等功能

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall
4.增加基本设置
修改.vimrc文件
*vim-go
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4

补全 Ctrl+x Ctrl+o 选择 Ctrl+N Ctrl+P
跳转 Ctrl+]
跳回 Ctrl+O 或 Ctrl+I
格式化 :GoFmt
重构 :GoRename 回车 ，提示输入新名称
自动导入 :GoImports
运行 :GoRun

Python-mode和 jedi-vim
https://github.com/python-mode/python-mode
代码补全，重构，跳转，自动格式化，自动导入等功能
查看是否支持 vim --version |grep python

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall
4.增加基本设置
修改.vimrc文件
* 默认使用的python3
let g:pymode_python = 'python3'
*保存文件时删除无用的空白符
let g:pymode_trim_whitespaces=1
let g:pymode_doc=1
let g:pymode_doc_bind='K'
* 转向定义的快捷键设置为Ctrl+]
let g:pymode_rope_goto_definition_bind="<C-]>"
let g:pymode_lint=1
let g:pymode_lint_checkers=['pyflakes','pep8','mccabe','pylint']
*行长度为120
let g:pymode_options_max_line_length=120

格式化 :Ctrl +Cro

 Vim tagbar 代码大纲，支持多种编程语言
 https://github.com/majutsushi/tagbar
 
安装步骤
1.依赖 Universal Ctags
Universal Ctags安装 参考https://github.com/universal-ctags/ctags/blob/master/docs/autotools.rst
2.修改.vimrc文件 ，增加插件名称
(
Plug 'majutsushi/tagbar'
)
3.重新启动vim或者 :source ~/.vimrc
4 执行:PlugInstall
5 基本设置 
"tagbar
nnoremap <leader>t:TagbarToggle<CR>

使用方式
:TagbarToggle


vim-interestingwords
https://github.com/lfv89/vim-interestingwords

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'lfv89/vim-interestingwords'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall

使用
<Leader>k 高亮
<Leader>K 清除高亮

deoplete.nvim/coc.vim

一个强大的neovim/vim8异步补全插件
https://github.com/shougo/deoplete.nvim
多编程语言的支持，支持模糊匹配
需要安装对应编程语言的扩展

安装步骤
1.修改.vimrc文件 ，增加插件名称
(
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall
4 基本设置 
"deoplete
let g:deoplete#enable_at_startup = 1
set completeopt=preview

使用
Ctrl+X Ctrl+O 补全代码

其他补全插件
如 delete-jedi for python
   delete-go for go

coc.vim
一个强大的neovim/vim8异步补全插件 LSP支持
https://github.com/neoclide/coc.nvim

格式化插件 Neoformat / vim-autoformat

 Neoformat
 https://github.com/sbdchd/neoformat
 
 安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'sbdchd/neoformat'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall
4 格式化python 还需要安装 pip install autopep8

使用
:Neoformat

静态检查Lint  neomake/ale
ale
https://github.com/w0rp/ale
同样需要安装对应语言的lint库，比如eslint/pylint/golint等
vim8/neovim 支持异步检查，不会影响vim编辑，推荐使用

 安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'w0rp/ale'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall
4 检查python 还需要安装 pip install pylint

注释插件 vim-commentary 
https://github.com/tpope/vim-commentary

gc 注释和取消注释

插件会根据不同文件类型使用不同的注释,python(#) golang(//)

 安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'tpope/vim-commentary'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall

Fugitive
https://github.com/tpope/vim-fugitive

 安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'tpope/vim-fugitive'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall

vim-gitgutter vim里显示文件变动
https://github.com/airblade/vim-gitgutter
 安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'airblade/vim-gitgutter'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall
4 基本设置 
"gitgutter
set updatetime=100

查看代码提交记录 gv.vim
命令行工具叫tig 可以查看代码提交记录
https://github.com/junegunn/gv.vim
使用:GV命令调用
可以浏览代码提交变更

 安装步骤
1.修改.vimrc文件 ，增加插件名称
(
Plug 'junegunn/gv.vim'
)
2.重新启动vim或者 :source ~/.vimrc
3 执行:PlugInstall

Tmux
强大的终端复用工具
ubuntu用户可以sudo apt-get install tmux 安装它
Ctrl+B% 分割屏幕
Ctrl+Bn 回到下一个窗口
Ctrl+Bp 回到上一个窗口
Ctrl+Bc 再创建一个窗口
Ctrl+Bs 现有会话
Ctrl+Bd 离开会话
tumx att -t 会话名称 调到该会话

neovim 
http://neovim.io

vim配置 开箱即用
https://github.com/SpaceVim/SpaceVim
https://github.com/PegasusWang/vim-config

vim资源
《Practical vim》
《笨方法学vimscript》





































